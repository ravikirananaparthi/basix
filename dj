#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

typedef pair<int, int> pii;

void dijkstra(vector<vector<pii>>& graph, int src, vector<int>& dist, vector<int>& parent) {
    int n = graph.size();
    dist.assign(n, INT_MAX);
    parent.assign(n, -1);
    priority_queue<pii, vector<pii>, greater<pii>> pq;

    dist[src] = 0;
    pq.push({0, src});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (auto& edge : graph[u]) {
            int v = edge.first;
            int weight = edge.second;

            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                parent[v] = u;
                pq.push({dist[v], v});
            }
        }
    }
}

void printPath(vector<int>& parent, int j) {
    if (parent[j] == -1)
        return;

    printPath(parent, parent[j]);
    cout << j << " ";
}

int main() {
    int V, E;
    cout << "Enter the number of vertices: ";
    cin >> V;
    cout << "Enter the number of edges: ";
    cin >> E;

    vector<vector<pii>> graph(V);

    cout << "Enter edges (u v weight):" << endl;
    for (int i = 0; i < E; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w}); // Comment this line if the graph is directed
    }

    int src;
    cout << "Enter the source vertex: ";
    cin >> src;

    vector<int> dist, parent;
    dijkstra(graph, src, dist, parent);

    cout << "Vertex\tDistance from Source\tPath" << endl;
    for (int i = 0; i < V; i++) {
        cout << i << "\t\t" << dist[i] << "\t\t\t" << src << " ";
        printPath(parent, i);
        cout << endl;
    }

    return 0;
}
